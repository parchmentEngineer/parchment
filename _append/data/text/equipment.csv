Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Protected Index,Do [sword]4 damage[;]|immune to errors,1,attack(4); sfxdamage(target|4);,,EVEN|EVEN,,GRAY,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|errorimmune,,,,,,,,,,,,
Protected Index_upgraded,Do [sword]6 damage[;]|immune to errors,1,attack(6); sfxdamage(target|6);,,EVEN|EVEN,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|errorimmune,,,,,,,,,,,,
Protected Index_downgraded,Do [sword]2 damage[;]|immune to errors,1,attack(2); sfxdamage(target|2);,,EVEN|EVEN,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|errorimmune,,,,,,,,,,,,
Risk Portfolio,Do [sword]1 damage[;] plus|[sword]1 per unused tails|,1,if(simulation) { bonus(-1000); } else { var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(di in self.dicepool) { if(di.available()) { if(di.basevalue % 2 == 1) temp++; } } } } } attack(temp); sfxdamage(target|temp); },,NORMAL,,RED,change_power,change_power,,,2,NO,NO,reunion|excludefromrandomlists,,e.setvar(~unusedtails~[;]1);,e.setvar(~unusedtails~[;]1);,,e.setvar(~unusedtails~[;]1);,var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) { if(d.basevalue % 2 == 1) temp++; } } } } } e.setvar(~unusedtails~[;]temp);,var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) { if(d.basevalue % 2 == 1) temp++; } } } } } e.setvar(~unusedtails~[;]temp);,,,,,
Risk Portfolio_upgraded,Do [sword]1 damage[;] plus|[sword]1 per unused tails|,1,if(simulation) { bonus(-1000); } else { var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(di in self.dicepool) { if(di.available()) { if(di.basevalue % 2 == 1) temp++; } } } } } attack(temp); sfxdamage(target|temp); },,NORMAL,,RED,,,,,-1,NO,NO,reunion|excludefromrandomlists,,e.setvar(~unusedtails~[;]1);,e.setvar(~unusedtails~[;]1);,,e.setvar(~unusedtails~[;]1);,var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) { if(d.basevalue % 2 == 1) temp++; } } } } } e.setvar(~unusedtails~[;]temp);,var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) { if(d.basevalue % 2 == 1) temp++; } } } } } e.setvar(~unusedtails~[;]temp);,,,,,
Risk Portfolio_downgraded,Do [sword]1 damage|,1,attack(1); sfxdamage(target|1);,,NORMAL,,RED,,,,,2,NO,NO,reunion|excludefromrandomlists,,e.setvar(~unusedtails~[;]1);,e.setvar(~unusedtails~[;]1);,,e.setvar(~unusedtails~[;]1);,var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) { if(d.basevalue % 2 == 1) temp++; } } } } } e.setvar(~unusedtails~[;]temp);,var temp = 1; if(self != null) { if(self.dicepool != null){ if(self.dicepool.length > 0) { for(d in self.dicepool) { if(d.available()) { if(d.basevalue % 2 == 1) temp++; } } } } } e.setvar(~unusedtails~[;]temp);,,,,,
Pawn Shop,Return two gold coins|[gray](once per battle),1,var coins = []; for(i in 0...2) {coins.push(pick([5|6]));} givedice(coins),,COMBINATION,,YELLOW,change_power,change_power,,,0,YES,YES,reunion|excludefromrandomlists|combination:777,,,,,,,,,,,,
Pawn Shop_upgraded,Return a gold heads|and a gold tails|[gray](once per battle),1,givedice([5|6]);,,COMBINATION,,YELLOW,,,,,0,YES,YES,reunion|excludefromrandomlists|combination:777,,,,,,,,,,,,
Pawn Shop_downgraded,Return two silver coins|[gray](once per battle),1,var coins = []; for(i in 0...2) {coins.push(pick([1|2]));} givedice(coins),,COMBINATION,,YELLOW,,,,,0,YES,YES,reunion|excludefromrandomlists|combination:777,,,,,,,,,,,,
Loan Shark,Do [sword]7 damage. Next|turn[;] take [sword]4 damage,1,attack(7); sfxdamage(target|7); jinx(~Loan Shark~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|self|self|1|4);  sfx(~_thinghappens~);,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|combination:ht,,,,,,,,,,,,
Loan Shark_upgraded,Do [sword]7 damage. Next|turn[;] take [sword]2 damage,1,attack(7); sfxdamage(target|7); jinx(~Loan Shark~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|self|self|1|2);  sfx(~_thinghappens~);,,COMBINATION,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:ht,,,,,,,,,,,,
Loan Shark_downgraded,Do [sword]4 damage. Next|turn[;] take [sword]4 damage,1,attack(4); sfxdamage(target|4); jinx(~Loan Shark~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|self|self|1|4);  sfx(~_thinghappens~);,,COMBINATION,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:ht,,,,,,,,,,,,
Tax Break,Heads: Do [sword]3 damage|Tails: Delay jinxes by [jinx]1,1,if(d%2==0) {attack(3); sfxdamage(target|3);} else {if(self.status.length > 0) {var t = self.status.copy(); for(st in t){if (st.type.split(~_~)[0] == ~jinx~) {st.add(2);} }  boostjinxcountdowns(self|1); } },,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,if(d%2 == 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Tax Break_upgraded,Heads: Do [sword]3 damage|Tails: Delay jinxes by [jinx]1|,1,if(d%2==0) {attack(3); sfxdamage(target|3);} else {if(self.status.length > 0) {var t = self.status.copy(); for(st in t){if (st.type.split(~_~)[0] == ~jinx~) {st.add(2);} }  boostjinxcountdowns(self|1); } },,NORMAL,,PINK,,,,,2,NO,NO,reunion|excludefromrandomlists,,,,,,,,,if(d%2 == 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Tax Break_downgraded,Do [sword]2 damage,1,attack(2); sfxdamage(target|2);,,EVEN,,PINK,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,if(d%2 == 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Blocked Funds,Do [sword]2 damage|On Gold: Gain [shield]2|,1,attack(2); sfxdamage(target|2); if(d>=5) {inflictself(SHIELD|2); sfx(~_shield~);},,NORMAL,,ORANGE,change_power,change_power,,,-1,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Blocked Funds_upgraded,Do [sword]3 damage|On Gold: Gain [shield]3|,1,attack(3); sfxdamage(target|3); if(d>=5) {inflictself(SHIELD|3); sfx(~_shield~);},,NORMAL,,ORANGE,,,,,-1,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Blocked Funds_downgraded,On Gold: Do [sword]2 damage| and gain [shield]2|,1,if(d>=5) {attack(2); sfxdamage(target|2); inflictself(SHIELD|2); sfx(~_shield~);},,NORMAL,,ORANGE,,,,,-1,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Downturn,Do [sword]5 damage|Add a Tails to the CPU,1,attack(5); sfxdamage(target|5); adjustrobotcounter(1); sfx(~jackpot_increasecounter~);,,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|combination:ttt,,,,,,,,,,,,
Downturn_upgraded,Do [sword]7 damage|Add a Tails to the CPU,1,attack(7); sfxdamage(target|7); adjustrobotcounter(1); sfx(~jackpot_increasecounter~);,,COMBINATION,,GREEN,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:ttt,,,,,,,,,,,,
Downturn_downgraded,Do [sword]2 damage|Add a Tails to the CPU,1,attack(2); sfxdamage(target|2); adjustrobotcounter(1); sfx(~jackpot_increasecounter~);,,COMBINATION,,GREEN,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:ttt,,,,,,,,,,,,
Defraud,Do [sword]3 damage|Delay jinxes by [jinx]3 turns|[gray](once per battle),1,attack(3); sfxdamage(target|3); if(self.status.length > 0) {var t = self.status.copy(); for(st in t){if (st.type.split(~_~)[0] == ~jinx~) {st.add(4);} }  boostjinxcountdowns(self|1); },,NORMAL,,PINK,change_power,change_power,,,0,NO,YES,reunion|excludefromrandomlists,,,,,,,,,,,,
Defraud_upgraded,Do [sword]5 damage|Delay jinxes by [jinx]5 turns|[gray](once per battle),1,attack(5); sfxdamage(target|5); if(self.status.length > 0) {var t = self.status.copy(); for(st in t){if (st.type.split(~_~)[0] == ~jinx~) {st.add(6);} }  boostjinxcountdowns(self|1); },,NORMAL,,PINK,,,,,0,NO,YES,reunion|excludefromrandomlists,,,,,,,,,,,,
Defraud_downgraded,Do [sword]3 damage|[gray](once per battle),1,attack(3); sfxdamage(target|3);,,NORMAL,,PINK,,,,,0,NO,YES,reunion|excludefromrandomlists,,,,,,,,,,,,
Pump and Dump,Convert to gold|The enemy gains [fury]fury,1,givedice(d+4); inflict(FURY); sfx(~_fury~);,,EVEN,,ORANGE,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Pump and Dump_upgraded,Convert to gold. Next turn[;]|the enemy gains [fury]fury,1,givedice(d+4);  jinx(~Pump and Dump~|~the enemy gains [fury]fury~|~The enemy gains [fury]fury~|~inflictself(FURY); sfx(\~_fury\~);~|self|self|1|1);,,EVEN,,ORANGE,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Pump and Dump_downgraded,Flip this coin|The enemy gains [fury]fury,1,if(d<=2) {givedice(3-d);} else {givedice((7-d)+4);} inflict(FURY); sfx(~_fury~);,,EVEN,,ORANGE,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Toss Up,Do [sword]3 damage[;] randomly|flip unused coins,2,attack(3); sfxdamage(target[;]3); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ if(mydice.basevalue<=2) {mydice.animatereroll(rand([1|2]) | self.screenposition() | c * 0.05);} else {mydice.animatereroll(rand([5|6]) | self.screenposition() | c * 0.05);} c++; } },,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Toss Up_upgraded,Do [sword]3 damage[;] randomly|flip unused coins,1,attack(3); sfxdamage(target[;]3); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ if(mydice.basevalue<=2) {mydice.animatereroll(rand([1|2]) | self.screenposition() | c * 0.05);} else {mydice.animatereroll(rand([5|6]) | self.screenposition() | c * 0.05);} c++; } },,NORMAL,,ORANGE,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Toss Up_downgraded,Randomly flip unused coins,2,var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ if(mydice.basevalue<=2) {mydice.animatereroll(rand([1|2]) | self.screenposition() | c * 0.05);} else {mydice.animatereroll(rand([5|6]) | self.screenposition() | c * 0.05);} c++; } },,NORMAL,,ORANGE,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Toss Up_weakened,Randomly flip unused coins,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ if(mydice.basevalue<=2) {mydice.animatereroll(rand([1|2]) | self.screenposition() | c * 0.05);} else {mydice.animatereroll(rand([5|6]) | self.screenposition() | c * 0.05);} c++; } },,NORMAL,,ORANGE,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Goldeneye Old,Do [sword] 4 damage. On|second gold[;] gain 1 dodge|,2,attack(4); sfxdamage(target|4); var goldUsed = e.getvar(~goldUsed~); if(d>=5) {goldUsed++;} if(goldUsed==2) {inflictself(DODGE);} e.setvar(~goldUsed~|goldUsed),,NORMAL,,YELLOW,change_power,change_power,,,2,NO,NO,reunion|excludefromrandomlists,,e.setvar(~goldUsed~|0),e.setvar(~goldUsed~|0),,e.setvar(~goldUsed~|0),,,e.setvar(~goldUsed~|0),,,,
Goldeneye Old_upgraded,Do [sword] 4 damage. On|second gold[;] gain 1 dodge|,1,attack(4); sfxdamage(target|4); var goldUsed = e.getvar(~goldUsed~); if(d>=5) {goldUsed++;} if(goldUsed==2) {inflictself(DODGE);} e.setvar(~goldUsed~|goldUsed),,NORMAL,,YELLOW,,,,,2,NO,NO,reunion|excludefromrandomlists,,e.setvar(~goldUsed~|0),e.setvar(~goldUsed~|0),,e.setvar(~goldUsed~|0),,,e.setvar(~goldUsed~|0),,,,
Goldeneye Old_downgraded,Do [sword] 1 damage. On|second gold[;] gain 1 dodge|,2,attack(1); sfxdamage(target|1); var goldUsed = e.getvar(~goldUsed~); if(d>=5) {goldUsed++;} if(goldUsed==2) {inflictself(DODGE);} e.setvar(~goldUsed~|goldUsed),,NORMAL,,YELLOW,,,,,2,NO,NO,reunion|excludefromrandomlists,,e.setvar(~goldUsed~|0),e.setvar(~goldUsed~|0),,e.setvar(~goldUsed~|0),,,e.setvar(~goldUsed~|0),,,,
Goldeneye Old_weakened,Do [sword] 1 damage. On|second gold[;] gain 1 dodge|,1,attack(1); sfxdamage(target|1); var goldUsed = e.getvar(~goldUsed~); if(d>=5) {goldUsed++;} if(goldUsed==2) {inflictself(DODGE);} e.setvar(~goldUsed~|goldUsed),,NORMAL,,YELLOW,,,,,2,NO,NO,reunion|excludefromrandomlists,,e.setvar(~goldUsed~|0),e.setvar(~goldUsed~|0),,e.setvar(~goldUsed~|0),,,e.setvar(~goldUsed~|0),,,,
Goldeneye,Do [sword]4 damage. On|gold[;] instead gain 1 dodge,1,if(d>=5) {inflictself(DODGE); sfx(~_dodge~);} else {attack(4); sfxdamage(target|4);},,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,if(d <= 2){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Goldeneye_upgraded,Do [sword]4 damage. On|gold[;] instead gain 1 dodge,1,if(d>=5) {inflictself(DODGE); sfx(~_dodge~);} else {attack(4); sfxdamage(target|4);},,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,if(d <= 2){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Goldeneye_downgraded,Do [sword]2 damage. On|gold[;] instead gain 1 [shield]shield,1,if(d>=5) {inflictself(SHIELD); sfx(~_shield~);} else {attack(2); sfxdamage(target|2);},,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,if(d <= 2){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Rollback,Do [sword] <evar:currdamage> damage. At|start of turn[;] reduce dmg|by [sword]1 per dice in this,2,var currdamage = e.getvar(~currdamage~); attack(currdamage); sfxdamage(target|currdamage); e.dicehistory = [];,,COMBINATION,,RED,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|combination:hthth,,e.setvar(~currdamage~|25);,e.setvar(~currdamage~|25);,,var len = e.dicehistory.length; var currdamage = e.getvar(~currdamage~); e.setvar(~currdamage~|currdamage-len); if(len > 0) {e.animate(~flashandshake~);} self.textparticle(e.dicehistory.length);,,,,,,,
Rollback_upgraded,Do [sword] <evar:currdamage> damage. At|start of turn[;] reduce dmg|by [sword]1 per dice in this,2,var currdamage = e.getvar(~currdamage~); attack(currdamage); sfxdamage(target|currdamage); e.dicehistory = [];,,COMBINATION,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:hthth,,e.setvar(~currdamage~|28);,e.setvar(~currdamage~|28);,,var len = e.dicehistory.length; var currdamage = e.getvar(~currdamage~); e.setvar(~currdamage~|currdamage-len); if(len > 0) {e.animate(~flashandshake~);},,,,,,,
Rollback_downgraded,No effect on use. At|start of turn[;] reduce dmg|by [sword]1 per dice in this,2,e.dicehistory = []; //Combinations and dice history doesn't work,,COMBINATION,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:hthth,,e.setvar(~currdamage~|25);,e.setvar(~currdamage~|25);,,var len = e.dicehistory.length; var currdamage = e.getvar(~currdamage~); e.setvar(~currdamage~|currdamage-len); if(len > 0) {e.animate(~flashandshake~);},,,,,,,
Asset Freeze,Do [ice]9 damage. Next|turn[;] freeze [ice]3 coins,2,attack(9|ICE); jinx(~Asset Freeze~|~freeze [ice]%VAR% coins~|~Receive [ice]%VAR% freeze~|~inflict(ICE|%VAR%); sfx(\~_ice\~);~|self|self|1|3); sfx(~_ice~);,,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|combination:hh,,,,,,,,,,,,
Asset Freeze_upgraded,Do [ice]12 damage. Next|turn[;] freeze [ice]3 coins,2,attack(12|ICE); jinx(~Asset Freeze~|~freeze [ice]%VAR% coins~|~Receive [ice]%VAR% freeze~|~inflict(ICE|%VAR%); sfx(\~_ice\~);~|self|self|1|3); sfx(~_ice~);,,COMBINATION,,BRIGHTCYAN,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:hh,,,,,,,,,,,,
Asset Freeze_downgraded,Do [ice]5 damage. Next|turn[;] freeze [ice]3 coins,2,attack(5|ICE); jinx(~Asset Freeze~|~freeze [ice]%VAR% coins~|~Receive [ice]%VAR% freeze~|~inflict(ICE|%VAR%); sfx(\~_ice\~);~|self|self|1|3); sfx(~_ice~);,,COMBINATION,,BRIGHTCYAN,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:hh,,,,,,,,,,,,
Tail Whip,Do [fire]3 damage|Inflict [fire]1 burn,1,attack(3|FIRE); inflict(FIRE); sfx(~_fire~);,,ODD,,RED,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tail Whip_upgraded,Do [fire]3 damage|Inflict [fire]1 burn|,1,attack(3|FIRE); inflict(FIRE); sfx(~_fire~);,,ODD,,RED,,,,,3,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tail Whip_downgraded,Inflict [fire]1 burn,1,inflict(FIRE); sfx(~_fire~);,,ODD,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Deductable,Return a tails|Delay jinxes by [jinx]1,1,if(d >= 5) { givedice(5); } else { givedice(1); } if(self.status.length > 0) {var t = self.status.copy(); for(st in t){if (st.type.split(~_~)[0] == ~jinx~) {st.add(2);} }  boostjinxcountdowns(self|1); },,EVEN,,PINK,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Deductable_upgraded,Return a tails|Delay jinxes by [jinx]1|,1,if(d >= 5) { givedice(5); } else { givedice(1); } if(self.status.length > 0) {var t = self.status.copy(); for(st in t){if (st.type.split(~_~)[0] == ~jinx~) {st.add(2);} }  boostjinxcountdowns(self|1); },,EVEN,,PINK,,,,,2,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Deductable_downgraded,Return a tails,1,if(d >= 5) { givedice(5); } else { givedice(1); },,EVEN,,PINK,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Speculation,Do [sword]15 damage. In [jinx]2|turns[;] enemy heals [heal]10,2,attack(15); sfxdamage(target|15); jinx(~Speculation~|~the enemy heals [heal]%VAR% health~|~The enemy heals [heal]%VAR% health~|~attackself(-%VAR%); sfx(\~_heal\~);~|self|self|2|10);,,COMBINATION,,GREEN,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|combination:htht,,,,,,,,,,,,
Speculation_upgraded,Do [sword]20 damage. In [jinx]2|turns[;] enemy heals [heal]10,2,attack(20); sfxdamage(target|20); jinx(~Speculation~|~the enemy heals [heal]%VAR% health~|~The enemy heals [heal]%VAR% health~|~attackself(-%VAR%); sfx(\~_heal\~);~|self|self|2|10);,,COMBINATION,,GREEN,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:htht,,,,,,,,,,,,
Speculation_downgraded,Do [sword]10 damage. In [jinx]2|turns[;] enemy heals [heal]10,2,attack(10); sfxdamage(target|10); jinx(~Speculation~|~the enemy heals [heal]%VAR% health~|~The enemy heals [heal]%VAR% health~|~attackself(-%VAR%); sfx(\~_heal\~);~|self|self|2|10);,,COMBINATION,,GREEN,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:htht,,,,,,,,,,,,
Macroeconomics,Do [sword]20 damage.,2,attack(20); sfxdamage(target|20);,,EVEN|ODD|ODD|EVEN,,RED,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Macroeconomics_upgraded,Do [sword]20 damage.,2,attack(20); sfxdamage(target|20);,,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Macroeconomics_downgraded,Do [sword]20 damage.,2,attack(20); sfxdamage(target|20);,,ODD|ODD|ODD|ODD,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Elastic Market,Do [sword]18 damage|Immune to errors,1,attack(18); sfxdamage(target|18);,,COMBINATION,,GRAY,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|errorimmune|combination:hhtt77,,,,,,,,,,,,
Elastic Market_upgraded,Do [sword]21 damage|Immune to errors,1,attack(21); sfxdamage(target|21);,,COMBINATION,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|errorimmune|combination:hhtt77,,,,,,,,,,,,
Elastic Market_downgraded,Do [sword]12 damage|Immune to errors,1,attack(12); sfxdamage(target|12);,,COMBINATION,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|errorimmune|combination:hhtt77,,,,,,,,,,,,
Buy Low,Do [sword]5 damage[;]|swap to Sell High|Immune to errors,2,attack(5); sfxdamage(target|5); giveequipment(~Sell High~|true|false|e); sfx(~_magic~);,,NORMAL|NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid|errorimmune,,,,,,,,,,,,
Buy Low_upgraded,Do [sword]7 damage[;]|swap to Sell High+|Immune to errors,2,attack(7); sfxdamage(target|7); giveequipment(~Sell High_upgraded~|true|false|e); sfx(~_magic~);,,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid|errorimmune,,,,,,,,,,,,
Buy Low_downgraded,Do [sword]2 damage[;]|swap to Sell High|Immune to errors,2,attack(2); sfxdamage(target|2); giveequipment(~Sell High~|true|false|e); sfx(~_magic~);,,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid|errorimmune,,,,,,,,,,,,
Buy Low_weakened,Do [sword]2 damage[;]|swap to Sell High+|Immune to errors,2,attack(2); sfxdamage(target|2); giveequipment(~Sell High_upgraded~|true|false|e); sfx(~_magic~);,,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid|errorimmune,,,,,,,,,,,,
Sell High,Do [sword]12 damage[;]|swap to Buy Low,2,attack(12); sfxdamage(target|12); giveequipment(~Buy Low~|true|false|e); sfx(~_magic~);,,MIN5|MIN5,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Sell High_upgraded,Do [sword]18 damage[;]|swap to Buy Low+,2,attack(18); sfxdamage(target|18); giveequipment(~Buy Low_upgraded~|true|false|e); sfx(~_magic~);,,MIN5|MIN5,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Sell High_downgraded,Do [sword]5 damage[;]|swap to Buy Low,2,attack(5); sfxdamage(target|5); giveequipment(~Buy Low~|true|false|e); sfx(~_magic~);,,MIN5|MIN5,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Sell High_weakened,Do [sword]5 damage[;]|swap to Buy Low+,2,attack(5); sfxdamage(target|5); giveequipment(~Buy Low_upgraded~|true|false|e); sfx(~_magic~);,,MIN5|MIN5,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Margin Economics,Do [sword]6 damage. On|silver: Take [sword]3 next turn,1,attack(6); sfxdamage(target|6); if(d<=2) {jinx(~Margin Economics~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|self|self|1|3);},,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Margin Economics_upgraded,Do [sword]8 damage. On|silver: Take [sword]3 next turn,1,attack(8); sfxdamage(target|8); if(d<=2) {jinx(~Margin Economics~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|self|self|1|3);},,NORMAL,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Margin Economics_downgraded,Do [sword]6 damage. On|silver: Take [sword]6 next turn,1,attack(6); sfxdamage(target|6); if(d<=2) {jinx(~Margin Economics~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|self|self|1|6);},,NORMAL,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Subsidy,Do [sword]5 damage|If equal[;] return a coin,1,attack(5); sfxdamage(target|5); var ad0 = actualdice[0].basevalue; var ad1 = actualdice[1].basevalue; if(ad0>=5) {ad0-=4;} if(ad1>=5) {ad1-=4;} if(ad0==ad1) {givedice(actualdice[0].basevalue);},,NORMAL|NORMAL,,RED,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Subsidy_upgraded,Do [sword]5 damage|If equal[;] return a gold coin,1,attack(5); sfxdamage(target|5); var ad0 = actualdice[0].basevalue; var ad1 = actualdice[1].basevalue; if(ad0>=5) {ad0-=4;} if(ad1>=5) {ad1-=4;} if(ad0==ad1) {givedice(ad0+4);},,NORMAL|NORMAL,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Subsidy_downgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target|5);,,EVEN|ODD,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Limited Time Offer,Unlocks a [sword]5 reusable|attack until end of turn,1,giveequipment(~Limited Time Offer@open~|true|false|e); sfx(~_magic~);,,COMBINATION,,GRAY,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid|combination:hth,,,,,,,,,,,,
Limited Time Offer_upgraded,Unlocks a [sword]8 reusable|attack until end of turn,1,giveequipment(~Limited Time Offer@open_upgraded~|true|false|e); sfx(~_magic~);,,COMBINATION,,GRAY,,,,,0,YES,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid|combination:hth,,,,,,,,,,,,
Limited Time Offer_downgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target|5);,,COMBINATION,,GRAY,,,,,0,YES,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid|combination:hth,,,,,,,,,,,,
Limited Time Offer@open,Do [sword] 5 damage|,1,attack(5); sfxdamage(target|5);,,NORMAL,,RED,change_power,change_power,,,-1,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Limited Time Offer~|true|false|e); sfx(~_magic~);,,giveequipment(~Limited Time Offer~|true|false|e); sfx(~_magic~);,,,giveequipment(~Limited Time Offer~|true|false|e); sfx(~_magic~);,,,,
Limited Time Offer@open_upgraded,Do [sword] 8 damage|,1,attack(8); sfxdamage(target|8);,,NORMAL,,RED,,,,,-1,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Limited Time Offer_upgraded~|true|false|e); sfx(~_magic~);,,giveequipment(~Limited Time Offer_upgraded~|true|false|e); sfx(~_magic~);,,,giveequipment(~Limited Time Offer_upgraded~|true|false|e); sfx(~_magic~);,,,,
Limited Time Offer@open_downgraded,Do [sword] 3 damage|,1,attack(3); sfxdamage(target|3);,,NORMAL,,RED,,,,,-1,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Limited Time Offer~|true|false|e); sfx(~_magic~);,,giveequipment(~Limited Time Offer~|true|false|e); sfx(~_magic~);,,,giveequipment(~Limited Time Offer~|true|false|e); sfx(~_magic~);,,,,
Limited Time Offer@open_weakened,Do [sword] 3 damage|,1,attack(3); sfxdamage(target|3);,,NORMAL,,RED,,,,,-1,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Limited Time Offer_upgraded~|true|false|e); sfx(~_magic~);,,giveequipment(~Limited Time Offer_upgraded~|true|false|e); sfx(~_magic~);,,,giveequipment(~Limited Time Offer_upgraded~|true|false|e); sfx(~_magic~);,,,,
Bank Account,Silver: Store coin in here|Gold: Withdraw all coins[;] do|[sword]3 per coin (Stored: <evar:storedcount>),1,var mult = 3; var heads = e.getvar(~storedheads~); var tails = e.getvar(~storedtails~); if(d==1) {e.setvar(~storedtails~|tails+1); sfx(~_thinghappens~);} if(d==2) {e.setvar(~storedheads~|heads+1); sfx(~_thinghappens~);} e.setvar(~storedcount~|heads+tails+1); if(d>=5) {e.setvar(~storedcount~|0); e.setvar(~storedtails~|0); e.setvar(~storedheads~|0); var coins = []; for(i in 0...heads) {coins.push(2);} for(i in 0...tails) {coins.push(1);} givedice(coins); var dmg = heads+tails; attack(dmg*mult); sfxdamage(target|dmg*mult);},,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists,,e.setvar(~storedcount~|0); e.setvar(~storedheads~|0); e.setvar(~storedtails~|0),e.setvar(~storedcount~|0); e.setvar(~storedheads~|0); e.setvar(~storedtails~|0),,,,,,if(d <= 2){ e.castdirection = -1; } else { e.castdirection = 1; },,,
Bank Account_upgraded,Silver: Store coin in here|Gold: Withdraw all coins[;] do|[sword]5 per coin (Stored: <evar:storedcount>),1,var mult = 5; var heads = e.getvar(~storedheads~); var tails = e.getvar(~storedtails~); if(d==1) {e.setvar(~storedtails~|tails+1); sfx(~_thinghappens~);} if(d==2) {e.setvar(~storedheads~|heads+1); sfx(~_thinghappens~);} e.setvar(~storedcount~|heads+tails+1); if(d>=5) {e.setvar(~storedcount~|0); e.setvar(~storedtails~|0); e.setvar(~storedheads~|0); var coins = []; for(i in 0...heads) {coins.push(2);} for(i in 0...tails) {coins.push(1);} givedice(coins); var dmg = heads+tails; attack(dmg*mult); sfxdamage(target|dmg*mult);},,NORMAL,,YELLOW,,,,,0,YES,NO,reunion|excludefromrandomlists,,e.setvar(~storedcount~|0); e.setvar(~storedheads~|0); e.setvar(~storedtails~|0),e.setvar(~storedcount~|0); e.setvar(~storedheads~|0); e.setvar(~storedtails~|0),,,,,,if(d <= 2){ e.castdirection = -1; } else { e.castdirection = 1; },,,
Bank Account_downgraded,Silver: Store coin in here|Gold: Withdraw all coins[;] do|[sword]3 per coin (Stored: <evar:storedcount>),1,var mult = 3; var heads = e.getvar(~storedheads~); var tails = e.getvar(~storedtails~); if(d==1) {e.setvar(~storedtails~|tails+1); sfx(~_thinghappens~);} if(d==2) {e.setvar(~storedheads~|heads+1); sfx(~_thinghappens~);} e.setvar(~storedcount~|heads+tails+1); if(d>=5) {e.setvar(~storedcount~|0); e.setvar(~storedtails~|0); e.setvar(~storedheads~|0); var coins = []; for(i in 0...heads) {coins.push(2);} for(i in 0...tails) {coins.push(1);} givedice(coins); var dmg = heads+tails; attack(dmg*mult); sfxdamage(target|dmg*mult);},,ODD,,YELLOW,,,,,0,YES,NO,reunion|excludefromrandomlists,,e.setvar(~storedcount~|0); e.setvar(~storedheads~|0); e.setvar(~storedtails~|0),e.setvar(~storedcount~|0); e.setvar(~storedheads~|0); e.setvar(~storedtails~|0),,,,,,if(d <= 2){ e.castdirection = -1; } else { e.castdirection = 1; },,,
Delayed Income,Add a tails and a heads to|the CPU. Next turn[;] gain|a tails and a heads.,1,inflictself(~stash~+1|1); inflictself(~stash~+2|1); inflictself(~illuminate_coin~); sfx(~_magic~); adjustrobotcounter(1); adjustrobotcounter(2);,,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Delayed Income_upgraded,Add a tails and a heads to|the CPU. Next turn[;] gain|a tails and a heads.,1,inflictself(~stash~+1|1); inflictself(~stash~+2|1); inflictself(~illuminate_coin~); sfx(~_magic~); adjustrobotcounter(1); adjustrobotcounter(2);,,NORMAL,,GREEN,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Delayed Income_downgraded,Add a tails and a heads to|the CPU. Next turn[;] gain|a tails and a heads.,1,inflictself(~stash~+1|1); inflictself(~stash~+2|1); inflictself(~illuminate_coin~); sfx(~_magic~); adjustrobotcounter(1); adjustrobotcounter(2);,,EVEN|EVEN,,GREEN,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Troy Weights,Silver: Inflict 2 Troy Ounces|Gold: Inflict 3 Troy Ounces|,1,var add=2; if(d>=5) {add++;} inflict(~troyounce~|add); sfx(~_trustfund~);,,NORMAL,,GRAY,change_power,change_power,,,2,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Troy Weights_upgraded,Silver: Inflict 2 Troy Ounces|Gold: Inflict 3 Troy Ounces|,1,var add=2; if(d>=5) {add++;} inflict(~troyounce~|add); sfx(~_trustfund~);,,NORMAL,,GRAY,,,,,-1,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Troy Weights_downgraded,Silver: Inflict 2 Troy Ounces|Gold: Inflict 3 Troy Ounces|,1,var add=2; if(d>=5) {add++;} inflict(~troyounce~|add); sfx(~_trustfund~);,,ODD,,GRAY,,,,,2,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Long Term Contract,Do [sword]6 damage|Next turn[;] lock [lock]1 coin|,1,attack(6); sfxdamage(target|6); jinx(~Long-Term Contract~|~gain [lock]%VAR% lock~|~Gain [lock]%VAR% lock~|~inflict(LOCK|%VAR%); sfx(\~_lock\~);~|self|self|1|1);,,EVEN,,GRAY,change_power,change_power,,,3,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Long Term Contract_upgraded,Do [sword]6 damage|Next turn[;] lock [lock]1 coin|,1,attack(6); sfxdamage(target|6); jinx(~Long-Term Contract~|~gain [lock]%VAR% lock~|~Gain [lock]%VAR% lock~|~inflict(LOCK|%VAR%); sfx(\~_lock\~);~|self|self|1|1);,,NORMAL,,GRAY,,,,,3,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Long Term Contract_downgraded,Do [sword]3 damage|Next turn[;] lock [lock]1 coin|,1,attack(3); sfxdamage(target|3); jinx(~Long-Term Contract~|~gain [lock]%VAR% lock~|~Gain [lock]%VAR% lock~|~inflict(LOCK|%VAR%); sfx(\~_lock\~);~|self|self|1|1);,,EVEN,,GRAY,,,,,3,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Lightning Capital,Do [shock]10 damage[;] add [shock]2|Starts each turn [shock]shocked,1,attack(10|~shock~); sfx(~_shock~); sfxdamage(target|10); inflict(~shock~|2);,,COMBINATION,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|combination:hth,,,,,e.animate(SHOCK);,,,,,,,
Lightning Capital_upgraded,Do [shock]12 damage[;] add [shock]3|Starts each turn [shock]shocked,1,attack(12|~shock~); sfx(~_shock~); sfxdamage(target|12); inflict(~shock~|3);,,COMBINATION,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:hth,,,,,e.animate(SHOCK);,,,,,,,
Lightning Capital_downgraded,Do [shock]7 damage[;] add [shock]1|Starts each turn [shock]shocked,1,attack(7|~shock~); sfx(~_shock~); sfxdamage(target|7); inflict(~shock~|1);,,COMBINATION,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists|combination:hth,,,,,e.animate(SHOCK);,,,,,,,
Startup Venture,Do [sword]4 damage|On gold[;] transforms until|end of combat,2,attack(4); sfxdamage(target|4); if(d>=5) {giveequipment(~Startup Venture@gold~|true|false|e); sfx(~_magic~);},,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Startup Venture_upgraded,Do [sword]4 damage|On gold[;] transforms until|end of combat,2,attack(4); sfxdamage(target|4); if(d>=5) {giveequipment(~Startup Venture@gold_upgraded~|true|false|e); sfx(~_magic~);},,NORMAL,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Startup Venture_downgraded,Do [sword]4 damage|If both are gold[;] transforms|until end of combat,2,attack(4); sfxdamage(target|4); if(d>=10) {giveequipment(~Startup Venture@gold~|true|false|e); sfx(~_magic~);},,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Startup Venture_weakened,Do [sword]4 damage|If both are gold[;] transforms|until end of combat,2,attack(4); sfxdamage(target|4); if(d>=10) {giveequipment(~Startup Venture@gold_upgraded~|true|false|e); sfx(~_magic~);},,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,,
Startup Venture@gold,Do [sword]7 damage|Gain 3 limit charge,2,attack(7); sfxdamage(target|7); self.limitvalue += 3; if(self.limitvalue >= self.limitmax) {self.limitvalue = self.limitmax;},,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Startup Venture~|true|false|e); sfx(~_magic~);,,,,,,,,,
Startup Venture@gold_upgraded,Do [sword]9 damage|Gain 4 limit charge,2,attack(9); sfxdamage(target|9); self.limitvalue += 4; if(self.limitvalue >= self.limitmax) {self.limitvalue = self.limitmax;},,NORMAL,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Startup Venture_upgraded~|true|false|e); sfx(~_magic~);,,,,,,,,,
Startup Venture@gold_downgraded,Do [sword]7 damage|Gain 3 limit charge,2,attack(7); sfxdamage(target|7); self.limitvalue += 3; if(self.limitvalue >= self.limitmax) {self.limitvalue = self.limitmax;},,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Startup Venture~|true|false|e); sfx(~_magic~);,,,,,,,,,
Startup Venture@gold_weakened,Do [sword]7 damage|Gain 3 limit charge,2,attack(7); sfxdamage(target|7); self.limitvalue += 3; if(self.limitvalue >= self.limitmax) {self.limitvalue = self.limitmax;},,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists,,,giveequipment(~Startup Venture_upgraded~|true|false|e); sfx(~_magic~);,,,,,,,,,
Last in Stock,Do [sword]7[;] +[sword]7 on gold|[gray](once per battle),1,var dmg = 7; if(d>=5) {dmg += 7;} attack(dmg); sfxdamage(target|dmg);,,EVEN,,YELLOW,change_power,change_power,,,0,NO,YES,reunion|excludefromrandomlists,,,,,,,,,,,,
Last in Stock_upgraded,Do [sword]10[;] +[sword]10 on gold|[gray](once per battle),1,var dmg = 10; if(d>=5) {dmg += 10;} attack(dmg); sfxdamage(target|dmg);,,EVEN,,YELLOW,,,,,0,NO,YES,reunion|excludefromrandomlists,,,,,,,,,,,,
Last in Stock_downgraded,Do [sword]7[;] +[sword]7 on gold|[gray](once per battle),1,var dmg = 7; if(d>=5) {dmg += 7;} attack(dmg); sfxdamage(target|dmg);,,EVEN|EVEN,,YELLOW,,,,,0,NO,YES,reunion|excludefromrandomlists,,,,,,,,,,,,
To The Moon,Do [sword]1 damage. On last|use[;] +[sword]2 and return coin|,1,var dmg = 1; var u = e.getvar(~used~); if(u==2) {givedice(d); dmg+=2;} attack(dmg); sfxdamage(target|dmg); e.setvar(~used~|u+1);,,NORMAL,,GRAY,change_power,change_power,,,3,NO,NO,reunion|excludefromrandomlists,,,,,e.setvar(~used~|0);,,,,,,,
To The Moon_upgraded,Do [sword]2 damage. On last|use[;] +[sword]3 and return coin|,1,var dmg = 2; var u = e.getvar(~used~); if(u==2) {givedice(d); dmg+=3;} attack(dmg); sfxdamage(target|dmg); e.setvar(~used~|u+1);,,NORMAL,,GRAY,,,,,3,NO,NO,reunion|excludefromrandomlists,,,,,e.setvar(~used~|0);,,,,,,,
To The Moon_downgraded,Do [sword]2 damage.|Return the coin,1,attack(2); sfxdamage(target|2); givedice(d);,,NORMAL,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,e.setvar(~used~|0);,,,,,,,
Starglimmer,Do [sword]4 damage|Add a random status,1,attack(4); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|1); sfxdamage(target|4); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,,DOUBLES|DOUBLES,,PINK,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Starglimmer_upgraded,Do [sword]4 damage|Add 2x random status,1,attack(4); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfxdamage(target|4); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,,DOUBLES|DOUBLES,,PINK,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Starglimmer_downgraded,Add a random status,1,var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|1); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,,DOUBLES|DOUBLES,,PINK,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 1 Clue,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 1 Standard,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 1 Synergy,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 2 Clue,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 2 Standard,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 2 Synergy,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 3 Standard A,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 3 Standard B,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tier 3 Synergy,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Map Scrap,Do[sword]1 damage|Gain [clue]1 clue,2,inflictself(~clue~); attack(1); sfxdamage(target|1);,,MIN3,,YELLOW,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Map Scrap_upgraded,Do[sword]1 damage|Gain [clue]1 clue,2,inflictself(~clue~); attack(1); sfxdamage(target|1);,,NORMAL,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Map Scrap_downgraded,Do[sword]1 damage|Gain [clue]1 clue,2,inflictself(~clue~); attack(1); sfxdamage(target|1);,,MIN5,,YELLOW,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Ahoy,Do [sword]2 damage,2,attack(2); sfxdamage(target|2);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Ahoy_upgraded,Do [sword]2 damage|Upgrade not implemented,2,attack(2); sfxdamage(target|2);,,NORMAL,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Ahoy_downgraded,Do [sword]1 damage,2,attack(1); sfxdamage(target|1);,,NORMAL,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Seeker's Map,Draw a card. On 4 or more[;]|instead gain [clue]2 clues,2,if(d>=4) {inflictself(~clue~|2);} else {Deck.drawlimit_bonus += 1; Deck.advance();},,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Seeker's Map_upgraded,Draw a card. On 4 or more[;]|also gain [clue]2 clues,2,if(d>=4) {inflictself(~clue~|2);} Deck.drawlimit_bonus += 1; Deck.advance();,,NORMAL,,YELLOW,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Seeker's Map_downgraded,Draw a card. On 5[;]|instead gain [clue]2 clues,2,if(d>=4) {inflictself(~clue~|2);} else {Deck.drawlimit_bonus += 1; Deck.advance();},,ODD,,YELLOW,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Metal Engraving,Gain [clue]2 clues|Gain [shield]2 shield,2,inflictself(~clue~|2); inflictself(~shield~|2);,,EVEN,,ORANGE,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Metal Engraving_upgraded,Gain [clue]2 clues|Gain [shield]2 shield,2,inflictself(~clue~|2); inflictself(~shield~|2);,,NORMAL,,ORANGE,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Metal Engraving_downgraded,Gain [clue]1 clue|Gain [shield]1 shield,2,inflictself(~clue~|1); inflictself(~shield~|1);,,EVEN,,ORANGE,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Rose Compass,Gain [clue]2 clues|If you are at [secret]Hidden [yellow]Card[]|tier 1 or 0[;] gain [thorns]2 thorns,2,inflictself(~clue~|2); if(getstatusself(~cardtier0~) >= 1) {inflictself(THORNS|2);} if(getstatusself(~cardtier1~) >= 1) {inflictself(THORNS|2); sfx(~_thorns~);},,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Rose Compass_upgraded,Gain [clue]2 clues|If you are at [secret]Hidden [yellow]Card[]|tier 1 or 0[;] gain [thorns]4 thorns,2,inflictself(~clue~|2); if(getstatusself(~cardtier0~) >= 1) {inflictself(THORNS|4);} if(getstatusself(~cardtier1~) >= 1) {inflictself(THORNS|4); sfx(~_thorns~);},,MAX5,,GREEN,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Rose Compass_downgraded,If you are at [secret]Hidden [yellow]Card[]|tier 1 or 0[;] gain [thorns]2 thorns,2,if(getstatusself(~cardtier0~) >= 1) {inflictself(THORNS|3);} if(getstatusself(~cardtier1~) >= 1) {inflictself(THORNS|2); sfx(~_thorns~);},,MAX5,,GREEN,,,,,0,YES,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Oar,1-3: Do [weaken]<d6> damage|4-6: Inflict [weaken]1 weaken,2,if(d<=3) {attack(d|WEAKEN); sfxdamage(target|d);} else {inflict(WEAKEN);} sfx(~_weaken~);,,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,reunion,,,,,,,,,,,,
Oar_upgraded,1-4: Do [weaken]<d6> damage|5-6: Inflict [weaken]2 weaken,2,if(d<=4) {attack(d|WEAKEN); sfxdamage(target|d);} else {inflict(WEAKEN|2);} sfx(~_weaken~);,,NORMAL,,ORANGE,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Oar_downgraded,1-3: Do [weaken]<d6> damage|4-6: Inflict [weaken]1 weaken,2,if(d<=3) {attack(d|WEAKEN); sfxdamage(target|d);} else {inflict(WEAKEN);} sfx(~_weaken~);,,ODD,,ORANGE,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Paddle Toss,Do [weaken]3 damage[;] inflict [weaken]<d6>|weaken in [jinx]<d6>-2 turns,2,attack(3|WEAKEN); sfxdamage(target|3); if(d<=2) {inflict(WEAKEN|d); sfx(~_weaken~);} else {jinx(~Paddle Toss~|~gain [weaken]%VAR% weaken~|~Gain [weaken]%VAR% weaken~|~inflict(WEAKEN|%VAR%); sfx(\~_weaken\~);~|target|self|d-2|d); sfx(~_thinghappens~);} sfx(~_weaken~);,,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,reunion,,,,,,,,,,,,
Paddle Toss_upgraded,Do [weaken]6 damage[;] inflict [weaken]<d6>|weaken in [jinx]<d6>-2 turns,2,attack(6|WEAKEN); sfxdamage(target|6); if(d<=2) {inflict(WEAKEN|d); sfx(~_weaken~);} else {jinx(~Paddle Toss~|~gain [weaken]%VAR% weaken~|~Gain [weaken]%VAR% weaken~|~inflict(WEAKEN|%VAR%); sfx(\~_weaken\~);~|target|self|d-2|d); sfx(~_thinghappens~);} sfx(~_weaken~);,,NORMAL,,ORANGE,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Paddle Toss_downgraded,Do [weaken]1 damage[;] inflict [weaken]<d6>|weaken in [jinx]<d6> turns,2,attack(1|WEAKEN); sfxdamage(target|1); jinx(~Paddle Toss~|~gain [weaken]%VAR% weaken~|~Gain [weaken]%VAR% weaken~|~inflict(WEAKEN|%VAR%); sfx(\~_weaken\~);~|target|self|d|d); sfx(~_thinghappens~); sfx(~_weaken~);,,NORMAL,,ORANGE,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Scull Boat,Do [weaken]5 damage[;] draw a|card for each [weaken]weaken|on the target,2,attack(5|WEAKEN); sfxdamage(target|5); for(i in 0...getstatus(WEAKEN)) {Deck.drawlimit_bonus += 1; Deck.advance();} sfx(~_weaken~);,,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,reunion,,,,,,,,,,,,
Scull Boat_upgraded,Do [weaken]5 damage[;] draw a|card for each [weaken]weaken|on the target,2,attack(5|WEAKEN); sfxdamage(target|5); for(i in 0...getstatus(WEAKEN)) {Deck.drawlimit_bonus += 1; Deck.advance();} sfx(~_weaken~);,,NORMAL,,ORANGE,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Scull Boat_downgraded,Do [weaken]5 damage[;] draw a|card for each [weaken]weaken|on the target,2,attack(5|WEAKEN); sfxdamage(target|5); for(i in 0...getstatus(WEAKEN)) {Deck.drawlimit_bonus += 1; Deck.advance();} sfx(~_weaken~);,,MAX2,,ORANGE,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Weaken 3,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Weaken 3_upgraded,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Weaken 3_downgraded,Something went wrong!|Please contact parchmentEngineer,2,,,,,GRAY,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
Tradewinds,Do [sword]3 damage|Returns a 4[;] 5[;] or 6,2,attack(3); sfxdamage(target|3); givedice(rand([4|5|6]));,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,reunion,,,,,,,,,,,,
Tradewinds_upgraded,Do [sword]6 damage|Returns a 4[;] 5[;] or 6,2,attack(6); sfxdamage(target|6); givedice(rand([4|5|6]));,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Tradewinds_downgraded,Returns a 4[;] 5[;] or 6,2,givedice(rand([4|5|6]));,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,reunion,,,,,,,,,,,,
Ka Ching,Invest [gold]1 coin,2,inflictself(~invest~);,,COMBINATION,,YELLOW,,,,,0,YES,NO,reunion|excludefromrandomlists|combination:hhh,,,,,,,,,,,,
Ka Chunk,Do [sword]2 damage|Heads: Do [sword]1 more,2,var dmg = 2; if(d%2==0) {dmg += 1;} attack(dmg); sfxdamage(target|dmg);,,NORMAL,,RED,,,,,0,NO,NO,reunion|excludefromrandomlists,,,,,,,,,,,,
